from __future__ import division
import random

file=open("/Users/Sara/Desktop/rosalind_ba2f.txt",'r')

dna=[]
k=0
t=0
m=0

for x in file.read().split():
    if(m==0):
        k=int(x)
        m=1
        continue
    if (m==1):
        t=int(x)
        m=2
        continue
    dna.append(x)
#### declaration of profile
        



##### method score that calculate number of mismatched letters between each string and the conses.. and should return the minimum score  
def score(motif):
    score=0
    indx=0
    for x in range(k):

        a=0
        t=0
        g=0
        c=0
        for m in motif:
            if m[x]=='A':
                a+=1
            if m[x]=='C':
                c+=1
            if m[x] =='G':
                g+=1
            if m[x]=='T':
                t+=1
            score+=(a+c+g+t)-max(a,c,t,g)
 #   print("score",score)
    return score

def calProfile(motifs):
   A=[]
   C=[]
   G=[]
   T=[]

   for i in range(len(motifs[0])):
      A.append(0)
      C.append(0)
      G.append(0)
      T.append(0)
   
   profile = [A,C,G,T]
   
   for i in range(0,len(motifs[0])):
      a=0
      c=0
      g=0
      t=0
      for motif in motifs:
         if motif[i] == "A":
            a+=1
         if motif[i] == "C":
            c+=1
         if motif[i] == "G":
            g+=1
         if motif[i] == "T":
            t+=1

      profile[0][i]=a/len(motifs) +1
      profile[1][i]=c/len(motifs) +1
      profile[2][i]=g/len(motifs) +1
      profile[3][i]=t/len(motifs) +1
   
   
   return profile

def generateMotifs(string):
    motifs=[]
    for x in dna:
        num=random.randint(0,len(x)-k)
        motif=x[num:num+k]
        motifs.append(motif)
    return motifs

def mostProbableMotif(profile,dna):
   motifs={}
   for i in range(len(dna)-k+1): 
      motif=dna[i:i+k]
      prob=1
      i=0
      for x in motif:
         if x=='A':
            prob*=profile[0][i]
         if x=='C':
            prob*=profile[1][i]
         if x=='G':
            prob*=profile[2][i]
         if x=='T':
            prob*=profile[3][i]
         i+=1
      motifs.update({motif:prob})
   
   mx=max(motifs.values())
   for x in motifs:
       if(mx==motifs[x]):
           most=x
           break
   return most

def generateMostProbableMotifs(profile,dna):
    temp=[]
    for string in dna:
        motif=mostProbableMotif(profile,string)
        temp.append(motif)
    return temp

def RandomizedMotifSearch(dna,k):
    motifs=generateMotifs(dna)
    best=motifs
    while (True):
        profile=calProfile(motifs)
        motifs=generateMostProbableMotifs(profile,dna)
        
        if score(motifs)<score (best):
            best=motifs
        else:
            return best

#bestM=[]
#randomMotifs=[]

bestM=generateMotifs(dna)
    
for i in range(1000):
    randomMotifs=RandomizedMotifSearch(dna,k)
    if score(randomMotifs)<score (bestM):
            bestM=randomMotifs

for x in bestM:
    print(x)