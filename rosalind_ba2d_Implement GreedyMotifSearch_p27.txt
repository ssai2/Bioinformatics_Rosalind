from __future__ import division

file=open("/Users/Sara/Desktop/rosalind_ba2d.txt",'r')

dna=[]
k=0
t=0
m=0

for x in file.read().split():
    if(m==0):
        k=int(x)
        m=1
        continue
    if (m==1):
        t=int(x)
        m=2
        continue
    dna.append(x)
#### declaration of profile
    
profile=[[0]*4 for i in range(k)]



##### method score that calculate number of mismatched letters between each string and the conses.. and should return the minimum score  
def score(motif):
    score=0
    indx=0
 #   scoreList={}
 #   con=consensus(motif)
   
    for x in range(k):
        a=0
        t=0
        g=0
        c=0
 #       mot=motif[x]
        for m in motif:
            if m[x]=='A':
                a+=1
            if m[x]=='C':
                c+=1
            if m[x] =='G':
                g+=1
            if m[x]=='T':
                t+=1
            score+=(a+c+g+t)-max(a,c,t,g)
 #   print("score",score)
    return score


def calProfile(motifs,profile):
    prob=[[0]*4 for i in range(k)]
    
    for i in range(len(motifs[0])):
        a=0
        t=0
        g=0
        c=0
        for m in motifs:
 #           print("motif:",motifs)

            if m[i]=='A':
                a+=1
            if m[i]=='C':
                c+=1
            if m[i] =='G':
                g+=1
            if m[i]=='T':
                t+=1

        profile[i][0]=a/len(motifs)
        profile[i][1]=c/len(motifs)
        profile[i][2]=g/len(motifs)
        profile[i][3]=t/len(motifs)
 #   print(profile)
    #return prob
def mostProbableMotif(profile,dna):
    mx=1
    i=0
    motifs={}
    most=""
   # print(profile,dna)
    for i in range(len(dna)-k):
        prob=1
        motif=dna[i:i+k]
        indx=0
        for x in motif:
            if x=='A':
                prob*=float(profile[indx][0])
            if x=='C':
                prob*=float(profile[indx][1])
            if x=='G':
                prob*=float(profile[indx][2])
            if x=='T':
                prob*=float(profile[indx][3])
 #           print(indx,prob,motif)
            indx+=1
            
        motifs.update({motif:prob})
    mx=max(motifs.values())
    for x in motifs:
        if(mx==motifs[x]):
            most=x
            break
    #print("most",most)
    return most

def greedyMotifSearch(dna,k,t):
    motif=[]
    best=[]

    for x in dna:
        best.append(x[0:k])

    for x in range (len(dna[0])-k+1):
        motif=[]
        motif.append(dna[0][x:x+k])

        for s in range(1,t):
           calProfile(motif,profile)
           motif.append(mostProbableMotif(profile,dna[s]))
            #print(s,motif,profile)
           calProfile(motif,profile)
           # print(score(motif),score(best))
        if(score(motif)<score(best)):
                best=motif
         #print(best)
    #return best
    for x in best:
        print(x)


greedyMotifSearch(dna,k,t)